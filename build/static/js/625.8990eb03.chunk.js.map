{"version":3,"file":"static/js/625.8990eb03.chunk.js","mappings":"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","sources":["pages/Category/_components/Modal.tsx","pages/Category/Category.tsx","store/rootHooks.ts"],"sourcesContent":["import { Form, Input, message, Modal, ModalProps } from 'antd'\r\nimport { FC, useEffect } from 'react'\r\nimport { useCategoryAddMutation, useCategoryUpdateMutation } from 'store/endpoints';\r\nimport { useAppDispatch } from 'store/rootHooks';\r\nimport { updateCategoryStates } from 'store/slices/categorySlice';\r\nimport { CategoryDTO } from 'types/categoryTypes';\r\n\r\n\r\n\r\ntype Props = ModalProps & {\r\n    modalType: string;\r\n    updateData: CategoryDTO | undefined\r\n}\r\n\r\n\r\n\r\nconst CategoryModal: FC<Props> = ({ updateData,modalType, ...modalProps }) => {\r\n    const [form] = Form.useForm();\r\n    const [categoryAddMutation, categoryAdd] = useCategoryAddMutation();\r\n    const [categoryUpdateMutation, categoryUpdate] = useCategoryUpdateMutation();\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    const clearState = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const handleSubmit = () => {    \r\n        form.validateFields()\r\n        .then(data=>{            \r\n            if (modalType === \"update\") {\r\n                const categoryPromise = categoryUpdateMutation({\r\n                    id: updateData?.id,\r\n                    value : data\r\n                }).unwrap();\r\n                categoryPromise.then((res)=>{\r\n                    if (res.statusCode === 200) {\r\n                        message.success(\"Muvaffaqiyati tahrirlandi.\");\r\n                        dispatch(updateCategoryStates({ openModal: false, modalType: '' }))\r\n                        clearState()\r\n                    }\r\n                })\r\n                .catch(err=>{\r\n                    message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n                })\r\n            }else if (modalType === 'create') {\r\n                const productPromise = categoryAddMutation(data).unwrap();\r\n                productPromise\r\n                    .then((res) => {\r\n                        if (res.statusCode === 200) {\r\n                            message.success(\"Muvaffaqiyati saqlandi.\");\r\n                            dispatch(updateCategoryStates({ openModal: false, modalType: '' }))\r\n                            clearState()\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n                    });\r\n            }\r\n            \r\n        }).catch(err => console.log('Form error: ', err))\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (updateData && modalType === \"update\") {\r\n            form.setFieldsValue({\r\n                name: updateData.name\r\n            })\r\n        }\r\n        return ()=>clearState()\r\n    },[updateData,modalType])\r\n\r\n    const props = { onOk: handleSubmit, confirmLoading: modalType.length ? modalType === 'create' ? categoryAdd.isLoading : categoryUpdate.isLoading : false, ...modalProps }\r\n    return (\r\n        <Modal\r\n            {...props}\r\n        >\r\n            <Form\r\n                form={form}\r\n                name=\"basic\"\r\n                layout=\"vertical\"\r\n                autoComplete=\"off\"\r\n\r\n            >\r\n\r\n                <Form.Item\r\n                    name=\"name\"\r\n                    label=\"Nomi:\"\r\n                    rules={[\r\n                        { required: true, message: `Kategoriyani nomini kiriting` },\r\n                    ]}\r\n                >\r\n                    <Input placeholder=\"Nomini kiriting\" />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CategoryModal","import React, { useState } from \"react\";\r\nimport { Button, Col, message, Row, TableColumnsType, Popconfirm, Table, Layout } from \"antd\";\r\nimport { Typography } from \"antd\";\r\nimport { useCategoryDeleteMutation, useCategoryQuery } from \"store/endpoints\";\r\nimport CategoryModal from \"./_components/Modal\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useAppDispatch, useAppSelector } from \"store/rootHooks\";\r\nimport { updateCategoryStates } from \"store/slices/categorySlice\";\r\nimport { CategoryDTO } from \"types/categoryTypes\";\r\n\r\nconst Category: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const { openModal, modalType } = useAppSelector(state => state.categorySlice)\r\n  const dispatch = useAppDispatch()\r\n  const [query, setQuery] = useState({ page: 1, pageSize: 20 })\r\n  const categoryQuery = useCategoryQuery(query);\r\n  const [categoryDelete, { isLoading }] = useCategoryDeleteMutation();\r\n  const [updateData, setUpdateData] = useState<CategoryDTO | undefined>({ name: \"\" });\r\n  const handleUpdate = (data: CategoryDTO) => {\r\n    setUpdateData(data);\r\n    dispatch(updateCategoryStates({ openModal: true, modalType: 'update' }))\r\n  };\r\n\r\n  const handleDelete = (id: number | undefined) => {\r\n    const category = categoryDelete({ id }).unwrap();\r\n    category\r\n      .then((res) => {\r\n        if (res.statusCode === 200) {\r\n          message.success(\"Muvaffaqiyati o'chirildi.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n      });\r\n  };\r\n\r\n  const columns: TableColumnsType<CategoryDTO> = [\r\n    {\r\n      title: \"â„–\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: \"5%\",\r\n      render: (_, __, index) => <span>{index + 1}</span>,\r\n    },\r\n    {\r\n      title: \"Nomi\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      width: \"75%\",\r\n      render: (item) => <span>{item}</span>,\r\n    },\r\n    {\r\n      title: \"Amallar\",\r\n      key: \"action\",\r\n      width: \"20%\",\r\n      render: (item: CategoryDTO) => {\r\n        return (\r\n          <Row wrap={false} gutter={5}>\r\n            <Col>\r\n              <Button\r\n                size=\"small\"\r\n                type=\"primary\"\r\n                ghost\r\n                onClick={() => handleUpdate(item)}\r\n              >\r\n                {t('edit')}\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Popconfirm\r\n                okText={t(\"yes\")}\r\n                cancelText={t(\"no\")}\r\n                onConfirm={() => handleDelete(item.id)}\r\n                title={t(\"sureDelete\")}\r\n              >\r\n                <Button size=\"small\" danger disabled={isLoading}>\r\n                  {t(\"delete\")}\r\n                </Button>\r\n              </Popconfirm>\r\n            </Col>\r\n          </Row>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const handleCloseModal = () => {\r\n    dispatch(updateCategoryStates({ openModal: false, modalType: '' }))\r\n    setUpdateData(undefined)\r\n  }\r\n\r\n  const modalProps = {\r\n    title: modalType === 'update' ? t('edit') : t('add'),\r\n    open: openModal,\r\n    okText: modalType === 'update' ? t('edit') : t('add'),\r\n    cancelText: t('close'),\r\n    onCancel: handleCloseModal\r\n  }\r\n\r\n  const pagination =\r\n  {\r\n    total: categoryQuery.data?.meta?.total * categoryQuery.data?.meta?.pagesize,\r\n    page: query.page,\r\n    pageSizeOptions: [\"20\", \"50\", \"100\"],\r\n    showQuickJumper: true, showSizeChanger: true,\r\n    pageSize: query.pageSize,\r\n    current: query.page,\r\n    onChange: (page: number, pageSize: number) => {\r\n      setQuery({ page: page, pageSize: pageSize })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Layout.Content>\r\n        <Row>\r\n          <Col span={20}>\r\n            <Typography.Title level={2}>{t('menus.categories')}</Typography.Title>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => dispatch(updateCategoryStates({ openModal: true, modalType: 'create' }))}\r\n            >\r\n              {t('add')}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={categoryQuery.data?.data}\r\n          loading={categoryQuery.isFetching}\r\n          pagination={pagination}\r\n        />\r\n\r\n        <CategoryModal updateData={updateData} modalType={modalType} {...modalProps} />\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Category;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\n\r\n"],"names":["updateData","modalType","modalProps","Form","form","useCategoryAddMutation","categoryAddMutation","categoryAdd","useCategoryUpdateMutation","categoryUpdateMutation","categoryUpdate","dispatch","useAppDispatch","clearState","resetFields","useEffect","setFieldsValue","name","props","onOk","validateFields","then","data","id","value","unwrap","res","statusCode","message","updateCategoryStates","openModal","catch","err","console","log","confirmLoading","length","isLoading","layout","autoComplete","label","rules","required","placeholder","t","useTranslation","useAppSelector","state","categorySlice","useState","page","pageSize","query","setQuery","categoryQuery","useCategoryQuery","useCategoryDeleteMutation","categoryDelete","setUpdateData","columns","title","dataIndex","key","width","render","_","__","index","item","wrap","gutter","size","type","ghost","onClick","okText","cancelText","onConfirm","danger","disabled","open","onCancel","undefined","pagination","total","meta","pagesize","pageSizeOptions","showQuickJumper","showSizeChanger","current","onChange","span","level","dataSource","loading","isFetching","useDispatch","useSelector"],"sourceRoot":""}