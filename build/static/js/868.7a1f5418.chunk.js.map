{"version":3,"file":"static/js/868.7a1f5418.chunk.js","mappings":"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","sources":["constants/constants.ts","pages/Orders/_components/Map.tsx","pages/Orders/_components/Modal.tsx","pages/Orders/Orders.tsx"],"sourcesContent":["import moment from 'moment'\r\nexport const roles: Array<Object> = [\r\n    // {\r\n    //     id: 1,\r\n    //     name: 'CLIENT'\r\n    // },\r\n    {\r\n        id: 2,\r\n        name: 'ADMIN'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'COURIER'\r\n    }\r\n]\r\n\r\nexport const disabledDateStart = (current: any) => current && current >= moment().endOf('day');\r\nexport const dateFormat = \"DD.MM.YYYY\";\r\nexport const timeFormat = \"DD.MM.YYYY HH:mm:ss\";","import { Drawer, Spin } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport { YMaps, Map, Placemark, GeolocationControl, TypeSelector } from \"react-yandex-maps\";\r\nimport env from 'react-dotenv'\r\ninterface MapProps {\r\n    open: boolean;\r\n    coords: any;\r\n    address: string;\r\n    setOpen: (arg0: boolean) => void;\r\n    setCoords: (arg0: any) => void;\r\n    setAddress: (arg0: string) => void;\r\n    t: any;\r\n}\r\ntype Mapref = {\r\n    current: any;\r\n    geoObjects: any;\r\n};\r\ntype Ymaps = {\r\n    current?: any;\r\n    geocode?: any;\r\n    Placemark?: any;\r\n};\r\ntype PlacemarkRef = {\r\n    current: any;\r\n    geocode: any;\r\n    geometry: any;\r\n    events: any;\r\n};\r\nconst MapDrawer: React.FC<MapProps> = ({ open, setOpen, coords, setCoords, address, setAddress, t }) => {\r\n    const ymaps = useRef<Ymaps>();\r\n    const mapRef = useRef<Mapref>();\r\n    const placemarkRef = useRef<PlacemarkRef>();\r\n    // const [coordinates, setCoordinates] = useState([]);\r\n    const [isMapReady, setIsMapReady] = useState(false);\r\n    const onClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const createPlacemark = (coords: any) => {\r\n        if (ymaps.current)\r\n            return new ymaps.current.Placemark(coords);\r\n    };\r\n\r\n    const getAddress = (coords: React.SetStateAction<never[]>) => {\r\n        setCoords(coords)\r\n        ymaps?.current?.geocode(coords)?.then((res: { geoObjects: { get: (arg0: number) => any; }; }) => {\r\n            const firstGeoObject = res.geoObjects.get(0);\r\n            const newAddress = [\r\n                firstGeoObject.getLocalities().length\r\n                    ? firstGeoObject.getAddressLine() : firstGeoObject.getAddressLine()\r\n            ].filter(Boolean).join(\", \");\r\n            setAddress(newAddress);\r\n        });\r\n    };\r\n\r\n    const onMapClick = (e: { get: (arg0: string) => any; }) => {\r\n        const coords = e.get(\"coords\");\r\n        if (placemarkRef.current) {\r\n            placemarkRef.current.geometry.setCoordinates(coords);\r\n        } else {\r\n            placemarkRef.current = createPlacemark(coords);\r\n            mapRef.current?.geoObjects.add(placemarkRef.current);\r\n            placemarkRef.current?.events.add(\"dragend\", function () {\r\n                getAddress(placemarkRef.current?.geometry.getCoordinates());\r\n            });\r\n        }\r\n        getAddress(coords);\r\n    };\r\n\r\n    return (\r\n        <Drawer width='45%' style={{ padding: 0 }} title={`${t(\"ordersMenu.address\")}: ${address}`} placement=\"right\" onClose={onClose} open={open}>\r\n            <Spin spinning={!isMapReady}>\r\n                <div className='location'>\r\n                    <YMaps query={{ apikey: env.YnxMapKey }}>\r\n                        <Map\r\n                            defaultState={{ center: [55.751574, 37.573856], zoom: 12, controls: ['zoomControl', 'fullscreenControl'] }}\r\n                            className='mapYandex' onClick={onMapClick}\r\n                            onLoad={(e) => {\r\n                                if (e) {\r\n                                    ymaps.current = e\r\n                                    e.ready(() => setIsMapReady(true))\r\n                                }\r\n                            }}\r\n\r\n                            modules={['geoObject.addon.balloon', \"Placemark\", \"geocode\", 'geoObject.addon.hint',\r\n                                'borders', 'ObjectManager', 'geoObject.addon.editor', 'control.ZoomControl', 'control.FullscreenControl']}>\r\n                            {/* <FullscreenControl /> */}\r\n                            <Placemark options={{ draggable: true }} geometry={coords} />\r\n                            <GeolocationControl options={{\r\n                                float: 'left'\r\n                            }} />\r\n                            <TypeSelector options={{\r\n                                float: 'right'\r\n                            }} />\r\n                        </Map>\r\n                    </YMaps>\r\n                </div>\r\n            </Spin>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default MapDrawer;","import React, { useState, useEffect } from 'react';\r\nimport { useOrderAddMutation, useOrderUpdateMutation, useProductSearchQuery, useProductListQuery } from \"store/endpoints\";\r\nimport { Form, InputNumber, message, Select, ModalProps, Modal, Button, Spin, List, Space } from \"antd\";\r\nimport { ArrowRightOutlined, PlusOutlined, MinusOutlined } from '@ant-design/icons';\r\nimport { updateOrderStates } from 'store/slices/orderSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport MapDrawer from \"./Map\";\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { debounce, isEmpty } from \"lodash\";\r\n\r\nconst { Option } = Select;\r\n\r\ntype Props = ModalProps & {\r\n    productData: any,\r\n    updateData: any,\r\n    modalType: string;\r\n    t: any\r\n};\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 5,\r\n    },\r\n    wrapperCol: {\r\n        span: 18,\r\n    },\r\n}\r\ninterface Product {\r\n    id: number;\r\n    disabled?: undefined | any;\r\n    key: string | number;\r\n    label: string;\r\n    title: any;\r\n    value: number;\r\n    quantity: number;\r\n    name: string;\r\n    price: number;\r\n}\r\n\r\ninterface ProductReady {\r\n    productId?: number;\r\n    quantity?: number;\r\n}\r\n\r\nconst OrdersModal: React.FC<Props> = ({ updateData, t, productData, modalType, ...modalProps }) => {\r\n    // const productSearch = useProductSearchQuery(searchValue)\r\n    const wholeProductList = useProductListQuery({ isHave: true })\r\n    const dispatch = useDispatch()\r\n    const [openMap, setOpenMap] = useState(false);\r\n    const [coords, setCoords] = useState<any>([]);\r\n    const [address, setAddress] = useState(\"\");\r\n    const [products, setProducts] = useState<Array<any>>([])\r\n\r\n    const showDrawer = () => {\r\n        setOpenMap(true);\r\n    };\r\n    const [form] = Form.useForm();\r\n    const [orderUpdateMutation, orderUpdate] = useOrderUpdateMutation();\r\n    const [orderMutation, orderCreate] = useOrderAddMutation();\r\n    const clearState = () => {\r\n        setCoords([])\r\n        setAddress(\"\")\r\n        setProducts([])\r\n        form.resetFields()\r\n    }\r\n    useEffect(() => {\r\n        if (updateData && modalType === 'update') {\r\n            const updateProducts = updateData.data.products.map((item: { product: any; quantity: any; }) => {\r\n                return {\r\n                    ...item.product,\r\n                    quantity: item.quantity\r\n                }\r\n            })\r\n            const updateProductsValue = updateData.data.products.map((item: { product: any; }) => JSON.stringify(item.product))\r\n            console.log(\"updateData: \", updateProducts);\r\n            setProducts(updateProducts)\r\n            setCoords([updateData.data.location.latitude, updateData.data.location.longitude])\r\n            setAddress(updateData.data.location.address)\r\n            form.setFieldsValue({\r\n                productId: updateProductsValue,\r\n            })\r\n        }\r\n        return () => clearState()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateData, modalType])\r\n\r\n    const handleSubmit = () => {\r\n        form.validateFields()\r\n            .then(data => {\r\n                console.log('data: ', data);\r\n                console.log('products: ', products);\r\n                const newProductArray = products.map(item => {\r\n                    let newObj: ProductReady = {}\r\n                    newObj.productId = item.id\r\n                    newObj.quantity = item.quantity\r\n                    return newObj\r\n                })\r\n                const formData = {\r\n                    data: {\r\n                        products: newProductArray,\r\n                        location: {\r\n                            latitude: coords[0],\r\n                            longitude: coords[1],\r\n                            address: address\r\n                        }\r\n                    },\r\n                    courierId: 1,\r\n                    clientId: 1\r\n                }\r\n                if (modalType === 'update') {\r\n                    const orderPromise = orderUpdateMutation({\r\n                        id: updateData.id,\r\n                        value: formData,\r\n                    }).unwrap();\r\n                    orderPromise\r\n                        .then((res: { statusCode: number; }) => {\r\n                            if (res.statusCode === 200) {\r\n                                message.success(\"Muvaffaqiyati tahrirlandi.\");\r\n                                dispatch(updateOrderStates({ openModal: false, modalType: '' }))\r\n                                form.resetFields();\r\n                            }\r\n                        })\r\n                        .catch((err: { message: any; }) => {\r\n                            message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n                        });\r\n                } else if (modalType === 'create') {\r\n                    const orderPromise = orderMutation(formData).unwrap();\r\n                    orderPromise\r\n                        .then((res) => {\r\n                            if (res.statusCode === 200) {\r\n                                message.success(\"Muvaffaqiyati saqlandi.\");\r\n                                dispatch(updateOrderStates({ openModal: false, modalType: '' }))\r\n                                clearState()\r\n                            }\r\n                        })\r\n                        .catch((err) => {\r\n                            message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n                        });\r\n                }\r\n            }).catch(err => console.log('Form error: ', err))\r\n    };\r\n\r\n    const increamentQuantity = (productId: number) => {\r\n        setProducts(\r\n            products.map(item => {\r\n                if (item.id === productId) {\r\n                    item.quantity++\r\n                }\r\n                return item\r\n            })\r\n        )\r\n    }\r\n    const decreamentQuantity = (productId: number) => {\r\n        setProducts(\r\n            products.map(item => {\r\n                if (item.id === productId) {\r\n                    item.quantity--\r\n                }\r\n                return item\r\n            })\r\n        )\r\n    }\r\n    const onChangeSelect = (e: any[]) => {\r\n        const productList = e.map(item => {\r\n            const isExist = products.find(prod => prod.id === JSON.parse(item).id)\r\n            console.log(\"isExist: \", isExist);\r\n            return { ...JSON.parse(item), quantity: isExist ? isExist.quantity : 1 }\r\n        })\r\n\r\n        setProducts(productList)\r\n    }\r\n\r\n    // console.log(\"wholeProductList: \", wholeProductList);\r\n    // console.log(\"products: \", products);\r\n    const productOptions = wholeProductList?.data?.data?.map((product: any) =>\r\n        (<Option key={product.id} value={JSON.stringify(product)}>{product.name}</Option>))\r\n\r\n\r\n    const totalPrice = products.reduce((prevValue, currentValue) => {\r\n        return prevValue + (currentValue.price * currentValue.quantity)\r\n    }, 0)\r\n    const props = { onOk: handleSubmit, confirmLoading: modalType.length ? modalType === 'create' ? orderCreate.isLoading : orderUpdate.isLoading : false, forceRender: true, ...modalProps }\r\n    return (\r\n        <>\r\n            <Modal\r\n                {...props}\r\n            >\r\n                <Form\r\n                    {...formItemLayout}\r\n                    form={form}\r\n                    name=\"basic\"\r\n                    layout=\"horizontal\"\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <Form.Item\r\n                        name=\"productId\"\r\n                        label={t(\"menus.products\")}\r\n                        rules={[\r\n                            { required: true, message: t(\"ordersMenu.select_product\") },\r\n                        ]}\r\n                    >\r\n                        <Select\r\n                            // labelInValue\r\n                            mode='multiple'\r\n                            allowClear\r\n                            showSearch\r\n                            placeholder={t(\"ordersMenu.searchProduct\")}\r\n                            // value={searchValue}\r\n                            // onSearch={onProductSearch}\r\n                            // filterOption={false}\r\n                            // notFoundContent={productSearch.isLoading ? <Spin size=\"small\" /> : null}\r\n                            onChange={onChangeSelect}\r\n                        >\r\n                            {productOptions}\r\n                        </Select>\r\n                    </Form.Item>\r\n                    {!isEmpty(products) && <Form.Item label={t(\"ordersMenu.choosen\")}>\r\n                        <List\r\n                            itemLayout='horizontal'\r\n                            bordered\r\n                            size='small'\r\n                            // style={{ width: '60%', margin: \"auto\", marginBottom: 24 }}\r\n                            dataSource={products}\r\n                            footer={<Space direction='vertical' size=\"small\">\r\n                                <span>{t(\"ordersMenu.product_type\")}: {products.length}</span>\r\n                                <span>\r\n                                    {t(\"ordersMenu.total_sum\")}: <CurrencyFormat\r\n                                        value={totalPrice}\r\n                                        displayType={'text'}\r\n                                        thousandSeparator={true}\r\n                                    /> (RUB)\r\n                                </span>\r\n                            </Space>}\r\n                            renderItem={item => {\r\n                                return (\r\n                                    <List.Item\r\n                                        extra={<Space size={5} wrap><Button size='small' icon={<MinusOutlined />} onClick={() => {\r\n                                            if (item.quantity > 1) {\r\n                                                decreamentQuantity(item.id)\r\n                                            }\r\n                                        }} /> {item.quantity}\r\n                                            <Button size='small' onClick={() => increamentQuantity(item.id)} icon={<PlusOutlined />} /></Space>}\r\n                                        actions={[<><CurrencyFormat\r\n                                            value={item.price * item.quantity}\r\n                                            displayType={'text'}\r\n                                            thousandSeparator={true}\r\n                                        />{\" \"}(RUB)</>]}\r\n                                    >\r\n                                        {item.name}\r\n                                    </List.Item>\r\n                                )\r\n                            }}\r\n                        />\r\n                    </Form.Item>}\r\n                    <Form.Item name='map' label={t(\"ordersMenu.address\")}\r\n                        rules={[{ required: coords.length === 0, message: \"Xatolik\" }]}>\r\n                        <Button block onClick={showDrawer}>{coords.length === 0 ? t('ordersMenu.map_point') : t(\"ordersMenu.edit_map_point\")}<ArrowRightOutlined /></Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <MapDrawer\r\n                    open={openMap}\r\n                    setOpen={setOpenMap}\r\n                    coords={coords}\r\n                    setCoords={setCoords}\r\n                    address={address}\r\n                    setAddress={setAddress}\r\n                    t={t}\r\n                />\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrdersModal;\r\n","import React, { useState } from \"react\";\r\nimport type { RootState } from '../../store/store'\r\nimport { Button, Col, message, Row, Typography, Table, Popconfirm } from \"antd\";\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport { useTranslation } from 'react-i18next';\r\nimport OrdersModal from \"./_components/Modal\";\r\nimport { ProductDTO } from \"types\";\r\nimport { useOrderDeleteMutation, useOrderQuery, useProductQuery } from \"store/endpoints\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { timeFormat } from '../../constants/constants'\r\nimport { updateOrderStates } from \"store/slices/orderSlice\";\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport moment from \"moment\";\r\n\r\nconst Orders: React.FC = () => {\r\n    const { t } = useTranslation()\r\n    const { openModal, modalType } = useSelector((state: RootState) => state.orderSlice)\r\n    const dispatch = useDispatch()\r\n    const [query, setQuery] = useState({ page: 1, pageSize: 20 })\r\n\r\n    const productQuery = useProductQuery(query);\r\n    const orderQuery = useOrderQuery(query);\r\n    const [orderDelete, { isLoading }] = useOrderDeleteMutation();\r\n    const [updateData, setUpdateData] = useState();\r\n    const handleUpdate = (data: any) => {\r\n        setUpdateData(data);\r\n        dispatch(updateOrderStates({ openModal: true, modalType: 'update' }))\r\n    };\r\n    const handleDelete = (id: number | undefined) => {\r\n        const category = orderDelete({ id }).unwrap();\r\n        category\r\n            .then((res) => {\r\n                if (res.statusCode === 200) {\r\n                    message.success(\"Muvaffaqiyati o'chirildi.\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n            });\r\n    };\r\n\r\n    const columns: ColumnsType<any> = [\r\n        {\r\n            title: \"№\",\r\n            dataIndex: \"id\",\r\n            key: \"id\",\r\n            width: \"5%\",\r\n            render: (item, record, index) => <span>{index + 1}</span>,\r\n        },\r\n        {\r\n            title: t(\"time\"),\r\n            dataIndex: \"createdAt\",\r\n            key: \"createdAt\",\r\n            // width: \"75%\",\r\n            render: (item, record: any) => moment(item).format(timeFormat)\r\n        },\r\n        {\r\n            title: t(\"productsMenu.price\"),\r\n            dataIndex: \"total\",\r\n            key: \"total\",\r\n            // width: \"75%\",\r\n            render: (item, record) => <CurrencyFormat value={item} displayType={'text'} thousandSeparator={true} />\r\n        },\r\n        {\r\n            title: t(\"ordersMenu.address\"),\r\n            dataIndex: \"data\",\r\n            key: \"data\",\r\n            // width: \"75%\",\r\n            render: (item, record) => item.location.address\r\n        },\r\n        {\r\n            title: t(\"actions\"),\r\n            key: \"action\",\r\n            width: \"20%\",\r\n            render: (item: ProductDTO, record, index) => {\r\n                return (\r\n                    <Row wrap={false} gutter={5}>\r\n                        <Col>\r\n                            <Button\r\n                                size=\"small\"\r\n                                type=\"primary\"\r\n                                ghost\r\n                                onClick={() => handleUpdate(record)}\r\n                            >\r\n                                {t('edit')}\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Popconfirm\r\n                                okText={t(\"yes\")}\r\n                                cancelText={t(\"no\")}\r\n                                onConfirm={() => handleDelete(item.id)}\r\n                                title={t(\"sureDelete\")}\r\n                            >\r\n                                <Button size=\"small\" danger disabled={isLoading}>\r\n                                    {t(\"delete\")}\r\n                                </Button>\r\n                            </Popconfirm>\r\n                        </Col>\r\n                    </Row>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n    const handleCloseModal = () => {\r\n        dispatch(updateOrderStates({ openModal: false, modalType: '' }))\r\n        setUpdateData(undefined)\r\n    }\r\n\r\n    const pagination =\r\n    {\r\n        total: orderQuery.data?.meta?.total * orderQuery.data?.meta?.pagesize,\r\n        page: query.page,\r\n        pageSizeOptions: [\"20\", \"50\", \"100\"],\r\n        showQuickJumper: true, showSizeChanger: true,\r\n        pageSize: query.pageSize,\r\n        current: query.page,\r\n        onChange: (page: number, pageSize: number) => {\r\n            setQuery({ page: page, pageSize: pageSize })\r\n        }\r\n    }\r\n\r\n    const modalProps = {\r\n        title: modalType === 'update' ? t('edit') : t('add'),\r\n        open: openModal,\r\n        okText: modalType === 'update' ? t('edit') : t('add'),\r\n        cancelText: t('close'),\r\n        onCancel: handleCloseModal\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={20}>\r\n                    <Typography.Title level={2}>{t('menus.orders')}</Typography.Title>\r\n                </Col>\r\n                <Col span={4}>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => dispatch(updateOrderStates({ openModal: true, modalType: 'create' }))}\r\n                    >\r\n                        {t('add')}\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Table\r\n                columns={columns}\r\n                dataSource={orderQuery.data?.data}\r\n                loading={orderQuery.isFetching}\r\n                rowKey={record => record.id}\r\n                pagination={pagination}\r\n            />\r\n            <OrdersModal updateData={updateData} t={t} modalType={modalType} productData={productQuery.data?.data} {...modalProps} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n"],"names":["roles","id","name","disabledDateStart","current","moment","endOf","dateFormat","timeFormat","open","setOpen","coords","setCoords","address","setAddress","t","ymaps","useRef","mapRef","placemarkRef","useState","isMapReady","setIsMapReady","getAddress","geocode","then","res","firstGeoObject","geoObjects","get","newAddress","getLocalities","length","getAddressLine","filter","Boolean","join","width","style","padding","title","placement","onClose","spinning","className","query","apikey","env","defaultState","center","zoom","controls","onClick","e","geometry","setCoordinates","Placemark","createPlacemark","add","events","getCoordinates","onLoad","ready","modules","options","draggable","float","Option","Select","formItemLayout","labelCol","span","wrapperCol","updateData","modalType","productData","modalProps","wholeProductList","useProductListQuery","isHave","dispatch","useDispatch","openMap","setOpenMap","products","setProducts","Form","form","useOrderUpdateMutation","orderUpdateMutation","orderUpdate","useOrderAddMutation","orderMutation","orderCreate","clearState","resetFields","useEffect","updateProducts","data","map","item","product","quantity","updateProductsValue","JSON","stringify","console","log","location","latitude","longitude","setFieldsValue","productId","productOptions","value","totalPrice","reduce","prevValue","currentValue","price","props","onOk","validateFields","formData","newObj","courierId","clientId","unwrap","statusCode","message","updateOrderStates","openModal","catch","err","confirmLoading","isLoading","forceRender","layout","autoComplete","label","rules","required","mode","allowClear","showSearch","placeholder","onChange","productList","isExist","find","prod","parse","isEmpty","itemLayout","bordered","size","dataSource","footer","direction","displayType","thousandSeparator","renderItem","extra","wrap","icon","MinusOutlined","PlusOutlined","actions","block","ArrowRightOutlined","Map","useTranslation","useSelector","state","orderSlice","page","pageSize","setQuery","productQuery","useProductQuery","orderQuery","useOrderQuery","useOrderDeleteMutation","orderDelete","setUpdateData","columns","dataIndex","key","render","record","index","format","gutter","type","ghost","okText","cancelText","onConfirm","danger","disabled","pagination","total","meta","pagesize","pageSizeOptions","showQuickJumper","showSizeChanger","onCancel","undefined","level","loading","isFetching","rowKey"],"sourceRoot":""}