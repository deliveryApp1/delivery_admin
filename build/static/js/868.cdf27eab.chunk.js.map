{"version":3,"file":"static/js/868.cdf27eab.chunk.js","mappings":"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","sources":["constants/constants.ts","pages/Orders/_components/Map.tsx","pages/Orders/_components/Modal.tsx","pages/Orders/Orders.tsx"],"sourcesContent":["import moment from 'moment'\r\nexport const roles: Array<Object> = [\r\n    // {\r\n    //     id: 1,\r\n    //     name: 'CLIENT'\r\n    // },\r\n    {\r\n        id: 2,\r\n        name: 'ADMIN'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'COURIER'\r\n    }\r\n]\r\n\r\nexport const disabledDateStart = (current: any) => current && current >= moment().endOf('day');\r\nexport const dateFormat = \"DD.MM.YYYY\";\r\nexport const timeFormat = \"DD.MM.YYYY HH:mm:ss\";","import { Drawer, Spin } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport { YMaps, Map, Placemark, GeolocationControl, TypeSelector } from \"react-yandex-maps\";\r\nimport env from 'react-dotenv'\r\ninterface MapProps {\r\n    open: boolean;\r\n    coords: any;\r\n    address: string;\r\n    setOpen: (arg0: boolean) => void;\r\n    setCoords: (arg0: any) => void;\r\n    setAddress: (arg0: string) => void;\r\n}\r\ntype Mapref = {\r\n    current: any;\r\n    geoObjects: any;\r\n};\r\ntype Ymaps = {\r\n    current?: any;\r\n    geocode?: any;\r\n    Placemark?: any;\r\n};\r\ntype PlacemarkRef = {\r\n    current: any;\r\n    geocode: any;\r\n    geometry: any;\r\n    events: any;\r\n};\r\nconst MapDrawer: React.FC<MapProps> = ({ open, setOpen, coords, setCoords, address, setAddress }) => {\r\n    const ymaps = useRef<Ymaps>();\r\n    const mapRef = useRef<Mapref>();\r\n    const placemarkRef = useRef<PlacemarkRef>();\r\n    // const [coordinates, setCoordinates] = useState([]);\r\n    const [isMapReady, setIsMapReady] = useState(false);\r\n    const onClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const createPlacemark = (coords: any) => {\r\n        if (ymaps.current)\r\n            return new ymaps.current.Placemark(coords);\r\n    };\r\n\r\n    const getAddress = (coords: React.SetStateAction<never[]>) => {\r\n        setCoords(coords)\r\n        ymaps?.current?.geocode(coords)?.then((res: { geoObjects: { get: (arg0: number) => any; }; }) => {\r\n            const firstGeoObject = res.geoObjects.get(0);\r\n            const newAddress = [\r\n                firstGeoObject.getLocalities().length\r\n                    ? firstGeoObject.getAddressLine() : firstGeoObject.getAddressLine()\r\n            ].filter(Boolean).join(\", \");\r\n            setAddress(newAddress);\r\n        });\r\n    };\r\n\r\n    const onMapClick = (e: { get: (arg0: string) => any; }) => {\r\n        const coords = e.get(\"coords\");\r\n        if (placemarkRef.current) {\r\n            placemarkRef.current.geometry.setCoordinates(coords);\r\n        } else {\r\n            placemarkRef.current = createPlacemark(coords);\r\n            mapRef.current?.geoObjects.add(placemarkRef.current);\r\n            placemarkRef.current?.events.add(\"dragend\", function () {\r\n                getAddress(placemarkRef.current?.geometry.getCoordinates());\r\n            });\r\n        }\r\n        getAddress(coords);\r\n    };\r\n\r\n    return (\r\n        <Drawer width='45%' style={{ padding: 0 }} title={`Xaritadan belgilash: ${address}`} placement=\"right\" onClose={onClose} open={open}>\r\n            <Spin spinning={!isMapReady}>\r\n                <div className='location'>\r\n                    <YMaps query={{ apikey: env.YnxMapKey }}>\r\n                        <Map\r\n                            defaultState={{ center: [55.751574, 37.573856], zoom: 10, controls: ['zoomControl', 'fullscreenControl'] }}\r\n                            className='mapYandex' onClick={onMapClick}\r\n                            onLoad={(e) => {\r\n                                if (e) {\r\n                                    ymaps.current = e\r\n                                    e.ready(() => setIsMapReady(true))\r\n                                }\r\n                            }}\r\n\r\n                            modules={['geoObject.addon.balloon', \"Placemark\", \"geocode\", 'geoObject.addon.hint',\r\n                                'borders', 'ObjectManager', 'geoObject.addon.editor', 'control.ZoomControl', 'control.FullscreenControl']}>\r\n                            {/* <FullscreenControl /> */}\r\n                            <Placemark options={{ draggable: true }} geometry={coords} />\r\n                            <GeolocationControl options={{\r\n                                float: 'left'\r\n                            }} />\r\n                            <TypeSelector options={{\r\n                                float: 'right'\r\n                            }} />\r\n                        </Map>\r\n                    </YMaps>\r\n                </div>\r\n            </Spin>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default MapDrawer;","import React, { useState, useEffect } from 'react';\r\nimport { useOrderAddMutation, useOrderUpdateMutation, useProductSearchQuery } from \"store/endpoints\";\r\nimport { Form, InputNumber, message, Select, ModalProps, Modal, Button, Spin } from \"antd\";\r\nimport { ArrowRightOutlined } from '@ant-design/icons';\r\nimport { updateOrderStates } from 'store/slices/orderSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport MapDrawer from \"./Map\";\r\nimport { debounce } from \"lodash\";\r\n\r\nconst { Option } = Select;\r\n\r\ntype Props = ModalProps & {\r\n    productData: any,\r\n    updateData: any,\r\n    modalType: string;\r\n    t: any\r\n};\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 14,\r\n    },\r\n}\r\n\r\nconst OrdersModal: React.FC<Props> = ({ updateData, t, productData, modalType, ...modalProps }) => {\r\n    const [searchValue, setSearchValue] = useState<any>(updateData?.data?.products?.product?.name)\r\n    const productSearch = useProductSearchQuery(searchValue)\r\n    const dispatch = useDispatch()\r\n    const [openMap, setOpenMap] = useState(false);\r\n    const [coords, setCoords] = useState<any>([]);\r\n    const [address, setAddress] = useState(\"\");\r\n\r\n    const showDrawer = () => {\r\n        setOpenMap(true);\r\n    };\r\n    const [form] = Form.useForm();\r\n    const [orderUpdateMutation, orderUpdate] = useOrderUpdateMutation();\r\n    const [orderMutation, orderCreate] = useOrderAddMutation();\r\n    const clearState = () => {\r\n        setSearchValue(\"\")\r\n        setCoords([])\r\n        setAddress(\"\")\r\n        form.resetFields()\r\n    }\r\n    useEffect(() => {\r\n        if (updateData && modalType === 'update') {\r\n            setSearchValue(updateData.data.products[0].product.name)\r\n            setCoords([updateData.data.location.latitude, updateData.data.location.longitude])\r\n            setAddress(updateData.data.location.address)\r\n            form.setFieldsValue({\r\n                productId: updateData.data.products[0].product.id,\r\n                quantity: updateData.data.products[0].quantity,\r\n            })\r\n        }\r\n        return () => clearState()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateData, modalType])\r\n\r\n    const handleSubmit = () => {\r\n        form.validateFields()\r\n            .then(data => {\r\n                console.log('data: ', data);\r\n                console.log('coords: ', coords);\r\n                console.log('address: ', address);\r\n                const formData = {\r\n                    data: {\r\n                        products: [{\r\n                            productId: data.productId.value,\r\n                            quantity: data.quantity\r\n                        }],\r\n                        location: {\r\n                            latitude: coords[0],\r\n                            longitude: coords[1],\r\n                            address: address\r\n                        }\r\n                    },\r\n                    courierId: 1,\r\n                    clientId: 1\r\n                }\r\n                console.log(\"formData: \", formData);\r\n                if (modalType === 'update') {\r\n                    const orderPromise = orderUpdateMutation({\r\n                        id: updateData.id,\r\n                        value: data,\r\n                    }).unwrap();\r\n                    orderPromise\r\n                        .then((res: { statusCode: number; }) => {\r\n                            if (res.statusCode === 200) {\r\n                                message.success(\"Muvaffaqiyati tahrirlandi.\");\r\n                                dispatch(updateOrderStates({ openModal: false, modalType: '' }))\r\n                                form.resetFields();\r\n                            }\r\n                        })\r\n                        .catch((err: { message: any; }) => {\r\n                            message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n                        });\r\n                } else if (modalType === 'create') {\r\n                    const orderPromise = orderMutation(formData).unwrap();\r\n                    orderPromise\r\n                        .then((res) => {\r\n                            if (res.statusCode === 200) {\r\n                                message.success(\"Muvaffaqiyati saqlandi.\");\r\n                                dispatch(updateOrderStates({ openModal: false, modalType: '' }))\r\n                                clearState()\r\n                            }\r\n                        })\r\n                        .catch((err) => {\r\n                            message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n                        });\r\n                }\r\n            }).catch(err => console.log('Form error: ', err))\r\n\r\n    };\r\n\r\n    const onProductSearch = debounce(productName => {\r\n        setSearchValue(productName)\r\n    }, 300)\r\n    const productOptions = productSearch?.data?.data?.map((product: { id: any; name: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined; }) => (<Option key={product.id} value={product.id}>{product.name}</Option>))\r\n    const props = { onOk: handleSubmit, confirmLoading: modalType.length ? modalType === 'create' ? orderCreate.isLoading : orderUpdate.isLoading : false, forceRender: true, ...modalProps }\r\n    console.log(\"productOptions: \", productOptions);\r\n    return (\r\n        <>\r\n            <Modal\r\n                {...props}\r\n            >\r\n                <Form\r\n                    {...formItemLayout}\r\n                    form={form}\r\n                    name=\"basic\"\r\n                    layout=\"horizontal\"\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <Form.Item\r\n                        name=\"productId\"\r\n                        label={t(\"menus.products\")}\r\n                        rules={[\r\n                            { required: true, message: t(\"ordersMenu.select_product\") },\r\n                        ]}\r\n                    >\r\n                        <Select\r\n                            labelInValue\r\n                            mode='multiple'\r\n                            allowClear\r\n                            showSearch\r\n                            placeholder=\"Select products\"\r\n                            value={searchValue}\r\n                            onSearch={onProductSearch}\r\n                            filterOption={false}\r\n                            notFoundContent={productSearch.isLoading ? <Spin size=\"small\" /> : null}\r\n                        >\r\n                            {productOptions}\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"quantity\"\r\n                        label={t(\"ordersMenu.quantity\")}\r\n                        rules={[\r\n                            { required: true, message: `Miqdorini kiriting` },\r\n                        ]}\r\n                    >\r\n                        <InputNumber style={{ width: '100%' }} placeholder=\"Miqdorini kiriting\" />\r\n                    </Form.Item>\r\n                    <Form.Item name='map' label=\"Manzil\"\r\n                        rules={[{ required: coords.length === 0, message: \"Xatolik\" }]}>\r\n                        <Button block onClick={showDrawer}>Xaritadan belgilash<ArrowRightOutlined /></Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <MapDrawer\r\n                    open={openMap}\r\n                    setOpen={setOpenMap}\r\n                    coords={coords}\r\n                    setCoords={setCoords}\r\n                    address={address}\r\n                    setAddress={setAddress}\r\n                />\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrdersModal;\r\n","import React, { useState } from \"react\";\r\nimport type { RootState } from '../../store/store'\r\nimport { Button, Col, message, Row, Typography, Table, Popconfirm } from \"antd\";\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport { useTranslation } from 'react-i18next';\r\nimport OrdersModal from \"./_components/Modal\";\r\nimport { ProductDTO } from \"types\";\r\nimport { useOrderDeleteMutation, useOrderQuery, useProductQuery } from \"store/endpoints\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { timeFormat } from '../../constants/constants'\r\nimport { updateOrderStates } from \"store/slices/orderSlice\";\r\nimport moment from \"moment\";\r\n\r\nconst Orders: React.FC = () => {\r\n    const { t } = useTranslation()\r\n    const { openModal, modalType } = useSelector((state: RootState) => state.orderSlice)\r\n    const dispatch = useDispatch()\r\n    const [query, setQuery] = useState({ page: 1, pageSize: 20 })\r\n\r\n    const productQuery = useProductQuery(query);\r\n    const orderQuery = useOrderQuery(query);\r\n    const [orderDelete, { isLoading }] = useOrderDeleteMutation();\r\n    const [updateData, setUpdateData] = useState();\r\n    const handleUpdate = (data: any) => {\r\n        setUpdateData(data);\r\n        dispatch(updateOrderStates({ openModal: true, modalType: 'update' }))\r\n    };\r\n    const handleDelete = (id: number | undefined) => {\r\n        const category = orderDelete({ id }).unwrap();\r\n        category\r\n            .then((res) => {\r\n                if (res.statusCode === 200) {\r\n                    message.success(\"Muvaffaqiyati o'chirildi.\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                message.error(`Xatolik yuz berdi. Xatolik: ${err.message}`);\r\n            });\r\n    };\r\n\r\n    const columns: ColumnsType<any> = [\r\n        {\r\n            title: \"№\",\r\n            dataIndex: \"id\",\r\n            key: \"id\",\r\n            width: \"5%\",\r\n            render: (item, record, index) => <span>{index + 1}</span>,\r\n        },\r\n        {\r\n            title: t(\"time\"),\r\n            dataIndex: \"createdAt\",\r\n            key: \"createdAt\",\r\n            // width: \"75%\",\r\n            render: (item, record: any) => moment(item).format(timeFormat)\r\n        },\r\n        {\r\n            title: t(\"productsMenu.price\"),\r\n            dataIndex: \"total\",\r\n            key: \"total\",\r\n            // width: \"75%\",\r\n            render: (item, record) => item\r\n        },\r\n        {\r\n            title: t(\"ordersMenu.address\"),\r\n            dataIndex: \"data\",\r\n            key: \"data\",\r\n            // width: \"75%\",\r\n            render: (item, record) => item.location.address\r\n        },\r\n        {\r\n            title: t(\"actions\"),\r\n            key: \"action\",\r\n            width: \"20%\",\r\n            render: (item: ProductDTO, record, index) => {\r\n                return (\r\n                    <Row wrap={false} gutter={5}>\r\n                        <Col>\r\n                            <Button\r\n                                size=\"small\"\r\n                                type=\"primary\"\r\n                                ghost\r\n                                onClick={() => handleUpdate(record)}\r\n                            >\r\n                                {t('edit')}\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Popconfirm\r\n                                okText={t(\"yes\")}\r\n                                cancelText={t(\"no\")}\r\n                                onConfirm={() => handleDelete(item.id)}\r\n                                title={t(\"sureDelete\")}\r\n                            >\r\n                                <Button size=\"small\" danger disabled={isLoading}>\r\n                                    {t(\"delete\")}\r\n                                </Button>\r\n                            </Popconfirm>\r\n                        </Col>\r\n                    </Row>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n    const handleCloseModal = () => {\r\n        dispatch(updateOrderStates({ openModal: false, modalType: '' }))\r\n        setUpdateData(undefined)\r\n    }\r\n\r\n    const pagination =\r\n    {\r\n        total: orderQuery.data?.meta?.total * orderQuery.data?.meta?.pagesize,\r\n        page: query.page,\r\n        pageSizeOptions: [\"20\", \"50\", \"100\"],\r\n        showQuickJumper: true, showSizeChanger: true,\r\n        pageSize: query.pageSize,\r\n        current: query.page,\r\n        onChange: (page: number, pageSize: number) => {\r\n            setQuery({ page: page, pageSize: pageSize })\r\n        }\r\n    }\r\n\r\n    const modalProps = {\r\n        title: modalType === 'update' ? t('edit') : t('add'),\r\n        open: openModal,\r\n        okText: modalType === 'update' ? t('edit') : t('add'),\r\n        cancelText: t('close'),\r\n        onCancel: handleCloseModal\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={20}>\r\n                    <Typography.Title level={2}>{t('menus.orders')}</Typography.Title>\r\n                </Col>\r\n                <Col span={4}>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => dispatch(updateOrderStates({ openModal: true, modalType: 'create' }))}\r\n                    >\r\n                        {t('add')}\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Table\r\n                columns={columns}\r\n                dataSource={orderQuery.data?.data}\r\n                loading={orderQuery.isFetching}\r\n                rowKey={record => record.id}\r\n                pagination={pagination}\r\n            />\r\n            <OrdersModal updateData={updateData} t={t} modalType={modalType} productData={productQuery.data?.data} {...modalProps} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n"],"names":["roles","id","name","disabledDateStart","current","moment","endOf","dateFormat","timeFormat","open","setOpen","coords","setCoords","address","setAddress","ymaps","useRef","mapRef","placemarkRef","useState","isMapReady","setIsMapReady","getAddress","geocode","then","res","firstGeoObject","geoObjects","get","newAddress","getLocalities","length","getAddressLine","filter","Boolean","join","width","style","padding","title","placement","onClose","spinning","className","query","apikey","env","defaultState","center","zoom","controls","onClick","e","geometry","setCoordinates","Placemark","createPlacemark","add","events","getCoordinates","onLoad","ready","modules","options","draggable","float","Option","Select","formItemLayout","labelCol","span","wrapperCol","updateData","t","modalType","productData","modalProps","data","products","product","searchValue","setSearchValue","productSearch","useProductSearchQuery","dispatch","useDispatch","openMap","setOpenMap","Form","form","useOrderUpdateMutation","orderUpdateMutation","orderUpdate","useOrderAddMutation","orderMutation","orderCreate","clearState","resetFields","useEffect","location","latitude","longitude","setFieldsValue","productId","quantity","onProductSearch","debounce","productName","productOptions","map","value","props","onOk","validateFields","console","log","formData","courierId","clientId","unwrap","statusCode","message","updateOrderStates","openModal","catch","err","confirmLoading","isLoading","forceRender","layout","autoComplete","label","rules","required","labelInValue","mode","allowClear","showSearch","placeholder","onSearch","filterOption","notFoundContent","size","block","ArrowRightOutlined","Map","useTranslation","useSelector","state","orderSlice","page","pageSize","setQuery","productQuery","useProductQuery","orderQuery","useOrderQuery","useOrderDeleteMutation","orderDelete","setUpdateData","columns","dataIndex","key","render","item","record","index","format","wrap","gutter","type","ghost","okText","cancelText","onConfirm","danger","disabled","pagination","total","meta","pagesize","pageSizeOptions","showQuickJumper","showSizeChanger","onChange","onCancel","undefined","level","dataSource","loading","isFetching","rowKey"],"sourceRoot":""}